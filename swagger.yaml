swagger: "2.0"
info:
  description: "Catalog Service API of Open Poker"
  version: "1.0.0"
  title: "Catalog Service"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "vijju311985@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/"
tags:
- name: "Player"
  description: "Everything about your Users/players"
- name: "Room"
  description: "Player playing game in room"
schemes:
- "http"
- "https"
paths:
  /catalog/room:
    get:
      tags:
      - "Room"
      summary: "Get list of room in open poker"
      description: ""
      operationId: "getRooms"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Room"
  /catalog/room/{roomId}:
    get:
      tags:
      - "Room"
      summary: "Get Room by room identifer"
      description: ""
      operationId: "getRoomById"
      produces:
      - "application/json"
      parameters:
      - name: "roomId"
        in: "path"
        description: "The room identity that needs to be fetched. Use 1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Room"
        400:
          description: "Invalid room id supplied"
        404:
          description: "Room not found"
  /api/login:
    post:
      tags:
      - "Player"
      summary: "Logs player into the system"
      description: ""
      operationId: "loginPlayer"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Result"
        401:
          description: "Invalid username/password supplied"
  /api/logout:
    post:
      tags:
      - "Player"
      summary: "Logs out current logged in player session"
      description: ""
      operationId: "logoutPlayer"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Result"
        401:
          description: "Invalid username/password supplied"
  /catalog/user:
    post:
      tags:
      - "Player"
      summary: "Create a player"
      description: "user registration"
      operationId: "createPlayer"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created player object"
        required: true
        schema:
          $ref: "#/definitions/Player"
      responses:
        default:
          description: "successful operation"
    get:
      tags:
      - "Player"
      summary: "Get list of player in open poker"
      description: ""
      operationId: "getUsers"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Player"
  /catalog/user/{username}:
    get:
      tags:
      - "Player"
      summary: "Get Player by username"
      description: ""
      operationId: "getPlayerByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use admin for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Player"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
definitions:
  Player:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "Player"
  Room:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      capacity:
        type: "integer"
        format: "int64"
      smallBlind:
        type: "string"
      bigBlind:
        type: "string"
    xml:
      name: "Room"
  Result:
    type: "object"
    properties:
      success:
        type: "boolean"
